.SUFFIXES: .c .cpp .cc .cu .h .f .f90 .f90

## Determine machine architecture
MACHINE = $(shell uname -m)
SYSTEM = $(shell uname -s)

## Where to put binaries
BINDIR = .

### Complete Fortran compiler flags
F90FLAGS += -I. -I$(SRCDIR) -I$(SRCDIR)/support -I$(SRCDIR)/potentials

### Complete C compiler flags
CFLAGS += -I$(SRCDIR) -I$(SRCDIR)/support -I$(SRCDIR)/notb

### Include auto-generated source listings. These are generated by
### listclasses.py from the tools directory. See call to listclasses.py below.
$(shell touch _Makefile.modules)
include _Makefile.modules

## Source search paths
VPATH = \
	. \
        $(SRCDIR) \
	$(SRCDIR)/lammps \
	$(SRCDIR)/potentials \
        $(SRCDIR)/potentials/bop \
        $(SRCDIR)/potentials/bop/brenner \
        $(SRCDIR)/potentials/bop/kumagai \
        $(SRCDIR)/potentials/bop/tersoff \
        $(SRCDIR)/potentials/pair_potentials \
        $(SRCDIR)/potentials/bop/rebo2 \
        $(SRCDIR)/potentials/bop/rebo2x \
	$(SRCDIR)/potentials/coulomb \
        $(SRCDIR)/potentials/eam \
	$(SRCDIR)/notb \
	$(SRCDIR)/notb/dense \
	$(SRCDIR)/notb/dense/solver \
	$(SRCDIR)/notb/dense/analysis \
	$(SRCDIR)/qeq \
	$(SRCDIR)/special \
	$(SRCDIR)/support \
	$(SRCDIR)/unittests


## LAMMPS support library
LAMMPS_SUPPLIB = \
	c_f.f90 \
        error.f90 \
        System.f90 \
        MPI_context.f90 \
        Units.f90 \
	c_linearalgebra.cpp \
        f_linearalgebra.f90 \
        PeriodicTable.f90 \
	f_ptrdict.f90 \
	c_ptrdict.c \
	io.f90 \
	f_logging.f90 \
	c_logging.c \
	misc.f90 \
	timer.f90 \
	tls.f90 \
	simple_spline.f90 \
	nonuniform_spline.f90 \
	supplib.f90 \
	table2d.f90 \
	table3d.f90 \
	table4d.f90 \
	anderson_mixer.f90 \
	lammps_particles.f90 \
        lammps_neighbors.f90 \
	lammps_filter.f90 \
	coulomb_dispatch.f90 \
        versioninfo.f90 \
	atomistica.f90


## LAMMPS dispatch
LAMMPS_DISPATCH = \
	potentials_factory_c.c \
	potentials_factory_f90.f90
LAMMPS_DISPATCH_O1 = $(LAMMPS_DISPATCH:.c=.o)
LAMMPS_DISPATCH_O = $(LAMMPS_DISPATCH_O1:.f90=.o)


## Everything we need for LAMMPS support
LAMMPS_ALL = \
	$(LAMMPS_SUPPLIB) \
	$(POTENTIALS_MODS) \
	$(LAMMPS_DISPATCH)
LAMMPS_ALL_O4 = $(LAMMPS_ALL:.cpp=.o)
LAMMPS_ALL_O3 = $(LAMMPS_ALL_O4:.c=.o)
LAMMPS_ALL_O2 = $(LAMMPS_ALL_O3:.f=.o)
LAMMPS_ALL_O1 = $(LAMMPS_ALL_O2:.f90=.o)
LAMMPS_ALL_O = $(LAMMPS_ALL_O1:.f90=.o)


## Everything we need for unit tests
UNITTESTS = \
	fruit_util.f90 \
	fruit.f90 \
	c_f.f90 \
	error.f90 \
	System.f90 \
	Units.f90 \
	cutoff.f90 \
	test_cutoff.f90 \
	run_tests.f90
UNITTESTS_O = $(UNITTESTS:.f90=.o)

MAIN = \
	main.f90
MAIN_O = $(MAIN:.f90=.o)


CDEPS = \
	config.c
CDEPS_O = $(CDEPS:.c=.o)


C_STANDALONE_DISPATCH = \
	integrators_factory_c.c \
	potentials_factory_c.c \
	coulomb_factory_c.c \
	callables_factory_c.c
C_STANDALONE_DISPATCH_O = $(C_STANDALONE_DISPATCH:.c=.o)


.f.o:
	$(FC) $(FFLAGS) -c $^ -o $@

.f90.o:
	$(F90C) $(F90FLAGS) -c $^ -o $@

.c.o:
	$(CC) $(CFLAGS) -c $^ -o $@

.cpp.o:
	$(CXX) $(CFLAGS) -c $^ -o $@

.cc.o:
	$(CXX) $(CFLAGS) -c $^ -o $@

.cu.o:
	$(NVCC) $(CUFLAGS) -c $^ -o $@

versioninfo.f90:
	sh $(SRCDIR)/gen_versioninfo.sh $(SRCDIR) $(BINDIR) $(FC) $(OPTFLAGS)


# Targets
#
# Exclude compilation of certain modules here by adding a --exlude flag, see below.
#
factories:
	rm -f _Makefile.modules potentials.classes
	echo "#ifndef __HAVE_INC" > have.inc
	echo "#define __HAVE_INC" >> have.inc
	python $(SRCDIR)/../tools/listclasses.py --has_finterface=register_data $(SRCDIR) potentials potentials.classes _Makefile.modules have.inc
	echo "#endif" >> have.inc
	python $(SRCDIR)/lammps/gen_factory.py $(SRCDIR)/lammps $(FC) $(MACHINE) $(SYSTEM)

versioninfo:
	sh $(SRCDIR)/gen_versioninfo.sh $(SRCDIR) $(BINDIR) $(FC) $(OPTFLAGS)

atomistica: versioninfo $(LAMMPS_ALL_O)
	$(LIBTOOL) libatomistica.a $(LAMMPS_ALL_O)

unittests: versioninfo $(UNITTESTS_O)
	$(F90C) -o unittests $(UNITTESTS_O)

clean:
	rm -f *.o
	rm -f *.mod

