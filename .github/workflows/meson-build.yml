name: Meson Build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build:
    name: Build on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for setuptools-scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Verify git and checkout
      run: |
        git --version
        git log --oneline -n 5 || echo "No git history"

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update -qy
        sudo apt-get install -y gfortran liblapack-dev ninja-build

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gcc lapack ninja

    - name: Set up Fortran compiler (macOS)
      if: runner.os == 'macOS'
      run: |
        # Find the gfortran installed by brew
        GCC_PREFIX=$(brew --prefix gcc)
        # Find the actual versioned gfortran (e.g., gfortran-14)
        GFORTRAN=$(ls ${GCC_PREFIX}/bin/gfortran-* 2>/dev/null | head -1)
        if [ -z "$GFORTRAN" ]; then
          GFORTRAN=$(which gfortran)
        fi
        if [ -z "$GFORTRAN" ]; then
          echo "ERROR: Could not find gfortran"
          exit 1
        fi
        echo "FC=${GFORTRAN}" >> $GITHUB_ENV

    - name: Install Python build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build meson-python meson ninja 'numpy>=2.0.0' ase pytest

    - name: Build wheel
      run: |
        set -o pipefail
        python -m build --no-isolation -w -v 2>&1 | tee build.log

    - name: Show build log on failure
      if: failure()
      run: |
        echo "=== Build failed. Full build log ==="
        cat build.log
        echo ""
        echo "=== Build log size ==="
        wc -l build.log

    - name: Install wheel
      run: |
        WHEEL=$(find . -name "*.whl" -type f | head -1)
        if [ -n "$WHEEL" ]; then
          pip install "$WHEEL"
        else
          echo "ERROR: No wheel file found!"
          exit 1
        fi

    - name: Test import
      run: |
        python -c "import atomistica; print('✓ Successfully imported atomistica')"
        python -c "from atomistica import _atomistica; print('✓ Successfully imported _atomistica extension')"
        python -c "from atomistica import _atomistica; classes = [x for x in dir(_atomistica) if not x.startswith('_')]; print(f'✓ Found {len(classes)} classes/functions')"

    - name: Run pytest tests
      run: |
        pytest tests/test_tersoff.py tests/test_io.py -v

    - name: Upload wheel as artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl
