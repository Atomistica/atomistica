The following instruction show how to compile, use and test the Python
interface to Atomistica.

1. Setup your compiler. Edit setup.cfg

   For GNU Fortran/C use:

     [config_fc]
     fcompiler=gnu95
     f90flags=-cpp -ffree-line-length-none [-fopenmp]

   For Intel Fortran/C (intel64) use:

     [config_fc]
     fcompiler=intelem
     f90flags=-fpp [-openmp]
 
     [config_cc]
     compiler=intel

   You can get a list of available Fortran and C compilers by executing:

     python setup.py build --help-fcompiler
     python setup.py build --help-compiler

   More information can be found here:

     http://docs.python.org/2/install/index.html
     http://thread.gmane.org/gmane.comp.python.numeric.general/15793


2. Compile the Python extension. Execute

     python setup.py build

   This will build and link all Fortran and C sources required for the Python
   interface. You may need to edit setup.py if the LAPACK libraries are not
   automatically detected.

   Note: You will need to

     python setup.py clean
     - or -
     python setup.py build --force

   if the source has changed. Unfortunately, the current numpy distutils
   won't relink the module even if the library has been recompiled.


3. Test if the Python interface imports with errors. Type

     source <path-to-atomistica>/env.sh

   which sets up the environment. To test if Atomistica can be imported into
   Python execute"

     python -c "import atomistica"


4. Test if the Python interface gives correct results. Type

     cd <path-to-atomistica>/test_suite/ase
     python run_tests.py

   Each test can also be run directly. This will produce more diagnostic output:

     python bulk_properties.py
     python forces_and_virial.py
     python rebo2_molecules.py

X. NOTE FOR OS X USERS.

   There seems to be a problem with "ar" on OS X not adding all module to the
   library properly. Use the tools/relink_osx.sh script to relink your
   _atomistica.so on OS X as a temporary fix.
